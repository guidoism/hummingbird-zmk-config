/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/* Layers */
#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3

/* Shortcuts */
#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define SLALL LC(A)

/* Key Position Groups */
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22  // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 23 24 25  // right-hand keys
#define THUMBS 26 27 28 29                        // thumb keys

/* Behavior Settings */
&sk {
  release-after-ms = <250>;
  quick-release;
};

&sl {
  release-after-ms = <250>;
};

/ {
    behaviors {
        mtl: mod_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_LEFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            global-quick-tap;
        };
        mtr: mod_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_RIGHT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            global-quick-tap;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV_L SYM_L>;
            then-layer = <NUM_L>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */

         /* Guido */
        mov { key-positions = <12 13>; bindings = <&mo NAV_L>; layers = <DEF_L>; };

         /* Letters */
        v { key-positions = <1 2>; bindings = <&kp V>; layers = <DEF_L>; };
        q { key-positions = <2 3>; bindings = <&kp Q>; layers = <DEF_L>; };
        z { key-positions = <20 21>; bindings = <&kp Z>; layers = <DEF_L>; };

        /* Brackets */
        lbkt { key-positions = <1 11>; bindings = <&kp LBKT>; layers = <DEF_L SYM_L NUM_L>; };
        rbkt { key-positions = <8 18>; bindings = <&kp RBKT>; layers = <DEF_L SYM_L NUM_L>; };
        lpar { key-positions = <2 12>; bindings = <&kp LPAR>; layers = <DEF_L SYM_L NUM_L>; };
        rpar { key-positions = <7 17>; bindings = <&kp RPAR>; layers = <DEF_L SYM_L NUM_L>; };
        lbrc { key-positions = <3 13>; bindings = <&kp LBRC>; layers = <DEF_L SYM_L NUM_L>; };
        rbrc { key-positions = <6 16>; bindings = <&kp RBRC>; layers = <DEF_L SYM_L NUM_L>; };

        /* Convenience */
        del { key-positions = <4 14>; bindings = <&kp DEL>; };
        esc { key-positions = <5 15>; bindings = <&kp ESC>; };
        slall { key-positions = <20 21>; bindings = <&kp SLALL>; layers = <NAV_L>; };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
 
                &kp Q     &kp W     &kp E     &kp R     &kp T       &kp Y     &kp U     &kp I     &kp O     &kp P
                &kp A     &kp S     &kp D     &kp F     &kp G       &kp H     &kp J     &kp K     &kp L     &kp COLON
                          &kp X     &kp C     &kp V                           &kp M     &kp DOT   &kp FSLH
                                    &sk LGUI  &sl NAV_L             &kp SPACE &sl SYM_L
            >;
        };
        nav_layer {
            label = "Nav";
            bindings = <
                &kp F1    &kp F2    &kp F3    &kp F4    &kp F5      &kp PG_UP &kp ESC   &kp UARW  &kp TAB   &kp HOME
                &kp LGUI  &kp LALT  &kp LSHFT &kp LCTRL &kp UNDO    &kp PG_DN &kp LARW  &kp DARW &kp RARW  &kp ENTER
                          &kp CUT   &kp COPY  &kp PASTE                       &kp BSPC  &kp END  &kp DEL
                                              &trans    &trans      &trans    &trans
            >;
        };
        sym_layer {
            label = "Sym";
            bindings = <
                &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp SEMI  &kp COLON &kp QMARK
                &kp TILDE &kp EQUAL &kp MINUS &kp FSLH  &kp GRAVE   &kp BSLH  &kp LCTRL &kp LSHFT &kp LALT  &kp LGUI
                          &kp UNDER &kp PLUS  &kp ASTRK                       &kp PIPE  &kp LT    &kp GT
                                              &trans    &trans      &trans    &trans
            >;
        };
        num_layer {
            label = "Num";
            bindings = <
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                &mtl LGUI N1 &mtl LALT N2 &mtl LSHFT N3 &mtl LCTRL N4 &kp N5 &kp N6 &mtr LCTRL N7 &mtr LSHFT N8 &mtr LALT N9 &mtr LGUI N0
                          &none     &none     &none                           &none     &none     &none
                                              &trans    &trans      &trans    &trans
            >;
        };
    };
};
